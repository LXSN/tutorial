[第二节]模板参数概述
你需要一个模具！――当你在浇铸时
模板参数分为模板形参和模板实参 
模板形参(template parameter)是用于在模板内表示实参的标识符
声明于模板参数列表中
模板形参一般分为四种：
1.类型模板参数(type template parameter)
2.非类型模板参数(non-type template parameter)
3.模板的模板参数(template template parameter)
4.(C++20)约束模板参数(constrained template parameter)
先讲第一个类型模板参数，在上一节中我们已经认识了类型模板参数
即，以类型作为模板的参数，以关键词typename或class引导，基本语法如下 
typename|class name = default
其中name就是这个形参的名称，如果用不上，可以省略。
= default用于指定默认值，可选，后面详细介绍
[提示]关于这里使用typename还是class一直都是一个争论不休的话题
class属于历史遗留，存在于大量的旧代码之中，但仍然被很多人沿用至今
typename则是后来专门提供的一个关键字，在很多新的代码中较为常见
而且并不是所有模板参数列表中的class都可以替换成typename(直到C++17) 
在本教程中，(只要可以)一律使用typename 
[提示]不管你是选用哪一个关键字作为引导，坚持其中一个是最为重要的 
[提示]不可以用struct或者union代替class
[提示]如同它的名字一样"typename"本质上就是类型的名字而已
它并不是什么数据类型(如果你疑惑于为何我要这么说，请看后面的非类型模板参数)
所以不能将它用作给类型"取别名"，所以下面这句话是错误的
typename my_type = int;
(C++11)如果你希望使用类似的语法，可以使用using
using my_type = int;
第二个则是非类型模板参数，即，不以类型作为模板的参数，基本语法如下
type name = default	
其中type就是这个模板参数的类型，它可以是一下任意一个(所有的cv限定符和修饰符都会被忽略) 
(括号内标注了在C++11<type_traits>的检查方法，其中T = decay<你需要检测的类型>::type)
整数类型 (is_integral<T>::value == true)
左值引用类型 (引用 对象 或 函数) (is_lvalue_reference<T>::value == true)
指针类型 (指向 对象 或 函数) (is_pointer<T>::value == true)
成员指针类型 (指向 成员对象 或 成员函数) (is_member_pointer<T>::value == true)
枚举类型 (is_enum<T>::value == true)
std::nullptr_t (C++11) (is_null_pointer<T>::value == true)
(C++17)你也可是把type指定为auto，由编译器进行推断 
而name就是这个形参的名称，如果用不上，可以省略。
= default用于指定默认值，可选，后面详细介绍 
非类型模板参数的限制
对于整数类型和枚举，它的模板参数必须是常量表达式(constant expression) 
即在编译时就必须确定值，比如5, (3 + 2) * 6, std::numeric_limits<int>::max()
对于指针和引用要么使用(C++11)nullptr要么就必须"带有链接"(with a linkage)的指针或引用 
[提示]关于"链接"(linkage),可以查阅相关书籍教程，那不属于本教程范围
对于成员指针要么使用(C++11)nullptr要么写成&Class::Member的形式
(C++11)对于nullptr_t，必须，也只能是nullptr 
(C++17)在C++17中，对于指针和引用的限制采用一套更加宽松的机制 
他们只要不指向/引用一下内容即可:
子对象 (包括非静态子对象，基类子对象，数组元素)
临时对象 (包括创建时初始化的引用)
字符串字面量 (比如"hello")
typeid的结果 (比如typeid(T))
预定义变量 __func__.
默认模板参数(default template arguments)
我们可以给模板指定一个默认值，所有默认的模板参数必须位于模板参数列表的末尾
但是对于一个参数，只能指定一次默认值，可以通过多个声明来个个指定，例如:
template<typename T, int N = 2333> void f();
template<typename T = double, int N> void f();
template<typename T, int N = 2333> void f();//错误：第二次指定默认值，即使默认值相同 
上面的例子(前两个声明)等同于：
template<typename T = double, int N = 2333> void f();
[提示]不管如何，你都最好把所有默认值写在一处:要么声明处，要么定义处，请勿兵分三路 
模板参数的命名
不管是什么东西都有相应的命名规范，模板参数也不例外
最明显的，首字母必须大写，这甚至比类的首字母大写还要严格
不同的模板参数，也会有不同的常用名
比如类型就常常是T、U、V T1、T2、T3，整数常常是I、N 等等
也可以写成带有含义的形式，比如CharType、Allocator、Compare
以后我们还会遇到Types、Args、Ints这样的带's'的模板参数
[提示]好的模板参数名称能巧妙的表达这个参数的含义
使用模板参数
template<typename T, T N>
//...
小结：
	1.  模板参数分为三种:类型模板参数、非类型模板参数、模板的模板参数 
　　2． 非类型模板参数有很多的限制 
　　3． 默认模板参数位于模板参数末尾，每一个只能指定一次 
鸣谢：
@langyo_v3
